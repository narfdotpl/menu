#!/usr/bin/env python
# encoding: utf-8

from __future__ import absolute_import, division
import os
import sys


class Node(object):

    def __init__(self, value):
        self.value = value
        self.child = None

    def __add__(self, x):
        if self.child:
            self.child += x
        else:
            self.child = x

        return self

    def __str__(self):
        return self.render()

    def render(self):
        return self.value


class TellNode(Node):

    def render(self):
        return 'tell %s\n%s\nend tell' % \
            (self.value, indent(self.child.render()))


def indent(text, spaces=4):
    return '\n'.join(' ' * spaces + line for line in text.split('\n'))


def argv_to_applescript(argv=None):
    # get argv
    if argv is None:
        argv = sys.argv

    # split argv
    app = argv[1]
    menu_item = argv[-1]
    menus = argv[2:-1]
    main_menu = menus[0]
    submenus = menus[1:]

    # create shortcuts
    tell = TellNode
    menu = lambda x: tell('menu bar item "%s"' % x) + tell('menu "%s"' % x)
    submenu = lambda x: tell('menu item "%s"' % x) + tell('menu "%s"' % x)
    click = lambda x: Node('click menu item "%s"' % x)

    # create tree for activating the app
    activate_tree = tell('application "%s"' % app) + Node('activate')

    # create tree for clicking through the menus
    menu_tree = tell('application "System Events"') + \
        tell('process "%s"' % app) + \
        tell('menu bar 1') + \
        menu(main_menu)

    # deal with submenus
    for name in submenus:
        menu_tree += submenu(name)

    # click
    menu_tree += click(menu_item)

    # return AppleScript
    return '%s\n\n%s' % (activate_tree, menu_tree)


def _main():
    os.system("osascript -e '%s' > /dev/null" % argv_to_applescript())

if __name__ == '__main__':
    _main()
